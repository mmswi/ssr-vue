const fs = require("fs");
const path = require("path");
const MFS = require("memory-fs"); // stores filesystem file in a js object
const webpack = require("webpack");
const chokidar = require("chokidar"); // filesystem watcher
const clientConfig = require("./webpack.client.config");
const serverConfig = require("./webpack.server.config");

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), "utf-8");
  } catch (e) {}
};

module.exports = function setupDevServer(server, templatePath, cb) {
  let bundle;
  let template = fs.readFileSync(templatePath, "utf-8");
  let clientManifest;
  let resolveDevServerPromise;

  const devServerPromise = new Promise(resolve => {
    resolveDevServerPromise = resolve;
  });

  //   watch for changes on the template
  chokidar.watch(templatePath).on("change", () => {
    template = fs.readFileSync(templatePath, "utf-8");
    console.log("index.template.html was updated.");
    update();
  });

  //   modifying the webpack.client.config to work with hot middleware
  clientConfig.entry.app = [
    "webpack-hot-middleware/client",
    clientConfig.entry.app
  ];
  clientConfig.output.filename = "[name].js";
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  );

  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require("webpack-dev-middleware")(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  });

  server.use(devMiddleware);

  //   after the compilation has completed, update the clientManifest json and call update()
  clientCompiler.plugin("done", stats => {
    stats = stats.toJson();
    stats.errors.forEach(err => console.error(err));
    stats.warnings.forEach(err => console.warn(err));
    if (stats.errors.length) return;
    clientManifest = JSON.parse(
      readFile(devMiddleware.fileSystem, "vue-ssr-client-manifest.json")
    );
    update();
  });

  // hot middleware
  server.use(
    require("webpack-hot-middleware")(clientCompiler, { heartbeat: 5000 })
  );

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();
  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    stats = stats.toJson();
    if (stats.errors.length) return;

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, "vue-ssr-server-bundle.json"));
    update();
  });

  //   update function resolves the devServerPromise and
  //   calls the callback with the bundle, template and
  //   client manifest globals
  function update() {
    if (bundle && clientManifest) {
      resolveDevServerPromise();
      cb(bundle, {
        template,
        clientManifest
      });
    }
  }

  return devServerPromise;
};
